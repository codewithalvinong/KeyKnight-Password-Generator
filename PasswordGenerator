import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.security.SecureRandom;

public class PasswordGeneratorApp extends Application {

    private SecureRandom random = new SecureRandom();
    private String upperCaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private String lowerCaseLetters = "abcdefghijklmnopqrstuvwxyz";
    private String digits = "23456789";
    private String punctuation = "!?#";
    private String similarCharacters = "Il1O0";
    private String programmingPunctuation = ";:{}[]()<>?\"\\'";
    private String otherChars = "@%[PROMPT]";
    private String vowels = "AEIOU";
    private String consonants = "BCDFGHJKLMNPQRSTVWXYZ";

    private int passwordLength = 8;
    private boolean includeLetters = true;
    private boolean includeUpperCase = true;
    private boolean includeLowerCase = true;
    private boolean includeNumbers = true;
    private boolean includeSymbols = true;
    private boolean excludeSimilar = true;
    private boolean excludeProgrammingPunctuation = true;
    private boolean pronounceablePassword = false;
    private int amountToGenerate = 1;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        VBox mainLayout = new VBox(10);
        mainLayout.setAlignment(Pos.CENTER);

        CheckBox includeLettersCB = new CheckBox("Include Letters");
        CheckBox includeUpperCaseCB = new CheckBox("Include Uppercase Letters");
        CheckBox includeLowerCaseCB = new CheckBox("Include Lowercase Letters");
        CheckBox includeNumbersCB = new CheckBox("Include Numbers");
        CheckBox includeSymbolsCB = new CheckBox("Include Symbols");
        CheckBox excludeSimilarCB = new CheckBox("Exclude Similar Characters");
        CheckBox excludeProgrammingPunctuationCB = new CheckBox("Avoid Punctuation Used in Programming");
        CheckBox pronounceablePasswordCB = new CheckBox("Generate Pronounceable Passwords");

        includeLettersCB.setSelected(getIncludeLetters());
        includeUpperCaseCB.setSelected(getIncludeUpperCase());
        includeLowerCaseCB.setSelected(getIncludeLowerCase());
        includeNumbersCB.setSelected(getIncludeNumbers());
        includeSymbolsCB.setSelected(getIncludeSymbols());
        excludeSimilarCB.setSelected(getExcludeSimilar());
        excludeProgrammingPunctuationCB.setSelected(getExcludeProgrammingPunctuation());
        pronounceablePasswordCB.setSelected(getPronounceablePassword());

        TextField passwordLengthTF = new TextField(Integer.toString(getPasswordLength()));
        TextField amountToGenerateTF = new TextField(Integer.toString(getAmountToGenerate()));

        Button generateButton = new Button("Generate Passwords");

        Label generatedPasswordsLbl = new Label();

        mainLayout.getChildren().addAll(includeLettersCB, includeUpperCaseCB, includeLowerCaseCB, includeNumbersCB,
                includeSymbolsCB, excludeSimilarCB, excludeProgrammingPunctuationCB, pronounceablePasswordCB,
                new Label("Password Length:"), passwordLengthTF, new Label("Amount of Passwords to Generate:"),
                amountToGenerateTF, generateButton, generatedPasswordsLbl);

        includeLettersCB.setOnAction(e -> setIncludeLetters(includeLettersCB.isSelected()));
        includeUpperCaseCB.setOnAction(e -> setIncludeUpperCase(includeUpperCaseCB.isSelected()));
        includeLowerCaseCB.setOnAction(e -> setIncludeLowerCase(includeLowerCaseCB.isSelected()));
        includeNumbersCB.setOnAction(e -> setIncludeNumbers(includeNumbersCB.isSelected()));
        includeSymbolsCB.setOnAction(e -> setIncludeSymbols(includeSymbolsCB.isSelected()));
        excludeSimilarCB.setOnAction(e -> setExcludeSimilar(excludeSimilarCB.isSelected()));
        excludeProgrammingPunctuationCB.setOnAction(e -> setExcludeProgrammingPunctuation(excludeProgrammingPunctuationCB.isSelected()));
        pronounceablePasswordCB.setOnAction(e -> setPronounceablePassword(pronounceablePasswordCB.isSelected()));

        generateButton.setOnAction(e -> {
            setPasswordLength(Integer.parseInt(passwordLengthTF.getText()));
            setAmountToGenerate(Integer.parseInt(amountToGenerateTF.getText()));

            StringBuilder generatedPasswords = new StringBuilder();
            for (int i = 0; i < getAmountToGenerate(); i++) {
                generatedPasswords.append(generatePassword()).append("\n");
            }
            generatedPasswordsLbl.setText(generatedPasswords.toString());
        });

        Scene scene = new Scene(mainLayout, 300, 500);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Password Generator App");
        primaryStage.show();
    }

    private String generatePassword() {
        StringBuilder password = new StringBuilder();

        String letters = (getIncludeUpperCase() ? upperCaseLetters : "") + (getIncludeLowerCase() ? lowerCaseLetters : "");
        String numbers = getIncludeNumbers() ? digits : "";
        String symbols = getIncludeSymbols() ? punctuation + otherChars : "";

        if (getExcludeSimilar()) {
            letters = letters.replace(similarCharacters, "");
            numbers = numbers.replace(similarCharacters, "");
            symbols = symbols.replace(similarCharacters, "");
        }

        if (getExcludeProgrammingPunctuation()) {
            symbols = symbols.replace(programmingPunctuation, "");
        }

        for (int i = 0; i < getPasswordLength(); i++) {
            if (getPronounceablePassword() && i % 2 == 0) {
                password.append(vowels.charAt(random.nextInt(vowels.length())));
            } else if (getPronounceablePassword()) {
                password.append(consonants.charAt(random.nextInt(consonants.length())));
            } else {
                String charSet;
                do {
                    int charSetNum = random.nextInt(3);
                    if (charSetNum == 0) {
                        charSet = letters;
                    } else if (charSetNum == 1) {
                        charSet = numbers;
                    } else {
                        charSet = symbols;
                    }
                } while (charSet.isEmpty());

                password.append(charSet.charAt(random.nextInt(charSet.length())));
            }
        }

        return password.toString();
    }

    // Getter and Setter Methods
    public int getPasswordLength() {
        return passwordLength;
    }

    public void setPasswordLength(int passwordLength) {
        this.passwordLength = passwordLength;
    }

    public boolean getIncludeLetters() {
        return includeLetters;
    }

    public void setIncludeLetters(boolean includeLetters) {
        this.includeLetters = includeLetters;
    }

    public boolean getIncludeUpperCase() {
        return includeUpperCase;
    }

    public void setIncludeUpperCase(boolean includeUpperCase) {
        this.includeUpperCase = includeUpperCase;
    }

    public boolean getIncludeLowerCase() {
        return includeLowerCase;
    }

    public void setIncludeLowerCase(boolean includeLowerCase) {
        this.includeLowerCase = includeLowerCase;
    }

    public boolean getIncludeNumbers() {
        return includeNumbers;
    }

    public void setIncludeNumbers(boolean includeNumbers) {
        this.includeNumbers = includeNumbers;
    }

    public boolean getIncludeSymbols() {
        return includeSymbols;
    }

    public void setIncludeSymbols(boolean includeSymbols) {
        this.includeSymbols = includeSymbols;
    }

    public boolean getExcludeSimilar() {
        return excludeSimilar;
    }

    public void setExcludeSimilar(boolean excludeSimilar) {
        this.excludeSimilar = excludeSimilar;
    }

    public boolean getExcludeProgrammingPunctuation() {
        return excludeProgrammingPunctuation;
    }

    public void setExcludeProgrammingPunctuation(boolean excludeProgrammingPunctuation) {
        this.excludeProgrammingPunctuation = excludeProgrammingPunctuation;
    }

    public boolean getPronounceablePassword() {
        return pronounceablePassword;
    }

    public void setPronounceablePassword(boolean pronounceablePassword) {
        this.pronounceablePassword = pronounceablePassword;
    }

    public int getAmountToGenerate() {
        return amountToGenerate;
    }

    public void setAmountToGenerate(int amountToGenerate) {
        this.amountToGenerate = amountToGenerate;
    }
}
